Lab 4: Hemant Ramawat(hr2378)

Please Note:
1. KNN output: As per the lab decription, the output should print precision and recall like
	Label=A Precision=2/3 Recall=2/3

	Whereas the provided examples for KNN also have "want=x got=y" lines.
	As per my understanding from the lab description, these should be printed in the 'verbose' mode, so I have impolemented it that way.

	So, in my implementation, outout for KNN will be:
	a. Without verbose:
		Label=A Precision=2/3 Recall=2/3
		Label=B Precision=2/3 Recall=2/3
	b. With verbose:
		want=A got=A
		want=B got=A
		want=A got=A
		want=A got=B
		want=B got=B
		want=B got=B
		Label=A Precision=2/3 Recall=2/3
		Label=B Precision=2/3 Recall=2/3

2. Naive Bayes: Similary, we have verbose for Naive Bayes where the output of my implementation, is same as provided outputs:
	a. Without verbose:
		Label=F Precision=0/0 Recall=0/1
		Label=T Precision=1/2 Recall=1/1
	b. With verbose:
		P(C=F) = [1 / 4]
		P(A0=1 | C=F) = 1 / 1
		P(A1=2 | C=F) = 1 / 1
		P(A2=2 | C=F) = 0 / 1
		P(C=T) = [3 / 4]
		P(A0=1 | C=T) = 1 / 3
		P(A1=2 | C=T) = 1 / 3
		P(A2=2 | C=T) = 1 / 3
		NB(C=F) = 0.000000
		NB(C=T) = 0.027778
		fail: got "T" != want "F"
		P(C=F) = [1 / 4]
		P(A0=2 | C=F) = 0 / 1
		P(A1=1 | C=F) = 0 / 1
		P(A2=2 | C=F) = 0 / 1
		P(C=T) = [3 / 4]
		P(A0=2 | C=T) = 2 / 3
		P(A1=1 | C=T) = 2 / 3
		P(A2=2 | C=T) = 1 / 3
		NB(C=F) = 0.000000
		NB(C=T) = 0.111111
		match: "T"
		Label=F Precision=0/0 Recall=0/1
		Label=T Precision=1/2 Recall=1/1

3. KMeans: In case of KMeans the output values matches the provided output but would have different precision.
My code is in C++ and I have set the precision to 13 decimal places, whereas provided outputs varies in precision.
	- Provided output:
		([562.125 1213.625 522.34375])
		([1140.942857142857 1487.2285714285715 1368.4857142857143])
		([1237.6363636363637 442.1212121212121 940])
	- My output:
		([562.1250000000000 1213.6250000000000 522.3437500000000])
		([1140.9428571428571 1487.2285714285715 1368.4857142857143])
		([1237.6363636363637 442.1212121212121 940.0000000000000])


Compilation:
learn.cpp compiles and runs successfully with gcc/g++ version 9.2.0 on crunchy5.cims.nyu.edu

Please load module gcc-9.2 before compiling and running learn.cpp using below command:
$ module load gcc-9.2 

Please fire below command to compile and test provided learn.cpp files:
- using `make`
  $ make

- or below command
$ g++ -g -std=c++17  -o learn ./learn.cpp


Usage:
	./learn -train <training_file> [-test <test_file>] -K <nof_nearest_neighbors> -C <Laplacian_correction> [-v] [-d e2|manh] [[x0,y0], [x1,y2], ...]

	• -train: the training file
	• -test: the testing data file (not used in kMeans)
	• -K: if > 0 indicates to use kNN and also the value of K (if 0, do Naive Bayes')
	• -C: if > 0 indicates the Laplacian correction to use (0 means don't use one)
	• -v: [optional] verbose flag that outputs each predicted vs actual label
	• -d: MANDATORY flag for KMeans, possible values 'e2' or 'manh' indicating euclidean distance squared or manhattan distance to use
	• arguments: if a list of centroids is provided those should be used for kMeans

Note: it is illegal for both K and C to be greater than 0


Example:
	./learn -train tests/1_knn1.train.txt -test tests/1_knn1.test.txt -K 3 -v
	./learn -train tests/2_knn2.train.txt -test tests/2_knn2.test.txt -K 3 -v
	./learn -train tests/3_knn3.train.txt -test tests/3_knn3.test.txt -K 3 -v
	./learn -train tests/3_knn3.train.txt -test tests/3_knn3.test.txt -K 5 -v
	./learn -train tests/3_knn3.train.txt -test tests/3_knn3.test.txt -K 7 -v
	./learn -train tests/4_ex1_train.csv -test tests/4_ex1_test.csv -C 0
	./learn -train tests/4_ex1_train.csv -test tests/4_ex1_test.csv -C 0 -v
	./learn -train tests/4_ex1_train.csv -test tests/4_ex1_test.csv -C 1
	./learn -train tests/4_ex1_train.csv -test tests/4_ex1_test.csv -C 1 -v
	./learn -train tests/5_ex2_train.csv -test tests/5_ex2_test.csv -C 0
	./learn -train tests/5_ex2_train.csv -test tests/5_ex2_test.csv -C 0 -v
	./learn -train tests/5_ex2_train.csv -test tests/5_ex2_test.csv -C 1
	./learn -train tests/5_ex2_train.csv -test tests/5_ex2_test.csv -C 1 -v
	./learn -train tests/5_ex2_train.csv -test tests/5_ex2_test.csv -C 2
	./learn -train tests/5_ex2_train.csv -test tests/5_ex2_test.csv -C 2 -v
	./learn -train tests/6_km1.txt -d e2 0,0 200,200 500,500
	./learn -train tests/6_km1.txt -d manh  0,0 200,200 500,500
	./learn -train tests/7_km2.txt -d e2 0,0,0 200,200,200 500,500,500
	./learn -train tests/7_km2.txt -d manh 0,0,0 200,200,200 500,500,500


